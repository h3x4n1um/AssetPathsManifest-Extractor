#include "json.hpp"
#include <fstream>

using namespace std;
using namespace nlohmann;

void _error(){
    cerr << R"(Error! "AssetPathsManifest" not found or not correct format!!!)" << "\n\n";
    system("pause");
}

ifstream input;
ofstream output;
json js, versions, patch;
string ls;

int main(){
    puts("AssetPathsManifest Extractor made by H3x4n1um version 2.3.1");
    puts(R"(Usage: put this file to the same folder you put the "AssetPathsManifest")");
    puts("Credits: nlohmann for his awesome JSON parser\n");

    /*Read AssetPathsManifest*/
    try{
        input.open("AssetPathsManifest");
        input >> js;
        input.close();
    }
    catch (invalid_argument e){
        _error();
        return 1;
    }

    try{
        /*Extract file name for PvZH_AB_Download*/
        output.open("PvZH_AB_Download.txt");
        output << "/********************************************************" << endl;
        output << "*This file was generated by AssetPathsManifest Extractor*" << endl;
        output << "*Version: 2.3.1                                         *" << endl;
        output << "*Made by: H3x4n1um                                      *" << endl;
        output << "********************************************************/" << endl;
        for (auto i : js.at("BundleNameToDetails").get<map <string, json> >()){
            output << i.first << endl;
        }
        output.close();

        /*Generate "verions"*/
        output.open("versions");
        versions["Comment"] = "This file was generated by AssetPathsManifest Extractor made by H3x4n1um version 2.3.1";
        versions["Entries"] = nullptr;
        for (auto i : js.at("BundleNameToDetails").get<map <string, json> >()){
            string tmp = R"(,{"Name": ")" + i.first + R"(", "Version": )" + to_string(i.second.at("Version").get<int>()) + '}';
            ls = ls + tmp;
        }
        ls.erase(ls.begin());
        versions = versions.patch(json::parse(R"([{"op": "add", "path": "/Entries", "value":[)" + ls + "]}]"));
        output << versions << endl;
        output.close();
    }
    catch (out_of_range e){
        _error();
        return 1;
    }
    puts("Done!\n");
    system("pause");
    return 0;
}
